"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.parseVerse=parseVerse,exports.getVerse=getVerse,exports.getChapter=function(e,t,r="default",i=!0){if(!isValidChapter(e,t))throw new Error("Invalid chapter reference");const n=bibleData[e][t];return"indexed"===r?n.map(((r,n)=>({key:`${e} ${t}:${n+1}`,book:e,chapter:t.toString(),verse:(n+1).toString(),content:i?parseVerse(r,"string"):r}))):"string"===r?n.map(((r,n)=>`${e} ${t}:${n+1} - ${i?parseVerse(r,"string"):r}`)).join("\n"):n},exports.getBook=function(e,t="default",r=!0){if(!isValidBook(e))throw new Error("Invalid book name");const i=bibleData[e];return"indexed"===t?Object.entries(i).flatMap((([t,i])=>i.map(((i,n)=>({key:`${e} ${t}:${n+1}`,book:e,chapter:t,verse:(n+1).toString(),content:r?parseVerse(i,"string"):i}))))):"string"===t?Object.entries(i).map((([t,i])=>i.map(((i,n)=>`${e} ${t}:${n+1} - ${r?parseVerse(i,"string"):i}`)).join("\n"))).join("\n\n"):i},exports.getChapterCount=getChapterCount,exports.getVerseCount=getVerseCount,exports.getBibleBooks=getBibleBooks,exports.getRange=function(e,t,r,i,n,o,s="default",a=!0){if(!isValidVerse(e,t,r)||!isValidVerse(i,n,o))throw new Error("Invalid verse reference");for(var l=[],b=getBibleBooks().indexOf(e),d=getBibleBooks().indexOf(i),u=b;u<=d;u++)for(var p=getBibleBooks()[u],c=u===b?t:1,g=u===d?n:getChapterCount(p),V=c;V<=g;V++)for(var f=u===b&&V===t?r:1,$=u===d&&V===n?o:getVerseCount(p,V),h=f;h<=$;h++){let e=getVerse(p,V,h)[0];a&&(e=parseVerse(e,"string")),l.push("indexed"===s?{key:`${p} ${V}:${h}`,book:p,chapter:V.toString(),verse:h.toString(),content:e}:"string"===s?`${p} ${V}:${h} - ${e}`:e)}return"string"===s?l.join("\n"):l},exports.searchVerse=function(e,t=!1,r=!1,i="indexed"){let n=[];const o=t?e:e.toLowerCase();for(let e in bibleData)for(let i in bibleData[e])for(let s in bibleData[e][i]){const a=bibleData[e][i][s],l=t?a:a.toLowerCase();let b;b=r?new RegExp(`\\b${o}\\b`,t?"":"i").test(l):-1!==l.indexOf(o),b&&n.push({key:`${e} ${i}:${s}`,book:e,chapter:i,verse:s,content:a})}return"string"===i?n.map((e=>`${e.book} ${e.chapter}:${e.verse} - ${e.content}`)).join("\n"):"indexed"===i?n:void 0},exports.resolveAbbreviation=function(e){return abbreviations[e]||e},exports.bibleStats=function(){return{books:Object.keys(bibleData).length,chapters:Object.values(bibleData).reduce(((e,t)=>e+Object.keys(t).length),0),verses:Object.values(bibleData).reduce(((e,t)=>e+Object.values(t).reduce(((e,t)=>e+t.length),0)),0)}},exports.bibleValidation=function(){return{isValidBook:isValidBook,isValidChapter:isValidChapter,isValidVerse:isValidVerse}};const bibleData=require("./data/bible.json"),abbreviations=require("./utils/abbreviations"),{isValidBook:isValidBook,isValidChapter:isValidChapter,isValidVerse:isValidVerse}=require("./utils/validation");function parseVerse(e,t="default"){if("default"===t||"string"===t)return e;if("indexed"===t)return e.split(" ").map(((e,t)=>({word:e,index:t})));throw new Error("Invalid outputType. Use 'default' or 'indexed'.")}function getVerse(e,t,r,i="default",n=!0){if(!isValidVerse(e,t,r))throw new Error("Invalid verse reference");let o=bibleData[e][t][r-1];return n&&(o=parseVerse(o,"string")),"indexed"===i?[{key:`${e} ${t}:${r}`,book:e,chapter:t.toString(),verse:r.toString(),content:o}]:"string"===i?`${e} ${t}:${r} - ${o}`:[o]}function getChapterCount(e){if(!isValidBook(e))throw new Error("Invalid book name");return Object.keys(bibleData[e]).length}function getVerseCount(e,t){if(!isValidChapter(e,t))throw new Error("Invalid chapter reference");return bibleData[e][t].length}function getBibleBooks(){return Object.keys(bibleData)}